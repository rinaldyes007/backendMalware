<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Input;
use DB;

use App\User;
use App\Transformers\UserTransformer;
use Auth;

class AuthController extends Controller
{
    public function register(Request $request, User $user)
    {
        $this->validate($request, [
            'nama_pegawai' => 'required',
            'no_hp' => 'required',
            'jabatan' => 'required',
            'email' => 'required|unique:users',
            'password' => 'required|min:6',
        ]);

        $user = $user->create([
            'nama_pegawai' => $request->nama_pegawai,
            'no_hp' => $request->no_hp,
            'jabatan' => $request->jabatan,
            'email' => $request->email,
            'password' => bcrypt($request->password),
            'api_token' => bcrypt($request->email)
        ]);

        $response = fractal() 
            ->item($user)
            ->transformWith(new UserTransformer)
            ->addMeta([
                'token' => $user->api_token,
            ])
            ->toArray();

            return response()->json($response, 201);
    }


    public function getRegister()
    {
        return view('adduser');
    }

    public function postRegister(Request $request)
    {

        $this->validate($request, [
            'email' => 'required|unique:users',
            
        ]);

        $user = new User();
        $user->nama_pegawai = Input::get('nama');
        $user->no_hp = Input::get('nohp');
        $user->jabatan = Input::get('jabatan');
        $user->email = Input::get('email');
        $user->password = bcrypt(Input::get('password'));
        $user->roles_id =  DB::table('roles')->select('id')->where('namaRule', 'user')->first()->id;

        $user->save();

        return redirect('user');
    }

    public function login(Request $request, User $user)
    {
       if (!Auth::attempt(['email' => $request->email, 'password' => $request->password])) {
           
           return response()->json(['error' => true ], 401);
       }  
           $user = $user->find(Auth::user()->id);
           

           return fractal() 
             ->item($user)
             ->transformWith(new UserTransformer)
             ->addMeta([
                 'token' => $user->api_token,
             ])
             ->toArray() ;

            
            
    }

    // public function edit($id)
    // {
    //    $user = DB::table('users')->where('id',$id)->get();
    //     // $acc= User::all();
    // //    dd($id);
    //    return view('edituser', compact('user', 'id'));
    // }

    // public function update(Request $request ,$id)
    // {
    //    $user = User::find($id);

    //    $user->update([
    //     'nama_pegawai'=>request('nama'),
    //     'no_hp'=>request('nohp'),
    //     'jabatan'=>request('jabatan'),
    //     'email'=>request('email'),
    //     'password'=>request('password'),
    //     //'role_id'=>request('role_id'),
    //    ]);

    // //    $user->nama_pegawai = Input::get('nama');
    // //    $user->no_hp = Input::get('nohp');
    // //    $user->jabatan = Input::get('jabatan');
    // //    $user->email = Input::get('email');
    // //    $user->password = bcrypt(Input::get('password'));
    // //    $user->roles_id =  DB::table('roles')->select('id')->where('namaRule', 'user')->first()->id;

    // //    $user->save();

    //    return redirect('user');
    // //    return view('edituser', compact('user','id'));
    // }

  

  

  
  
}
